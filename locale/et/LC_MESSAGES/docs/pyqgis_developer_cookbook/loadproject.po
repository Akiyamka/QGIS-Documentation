# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002-now, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
# 
# Translators:
# Harrissou Sant-anna, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation 3.28\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-03 15:20+0000\n"
"PO-Revision-Date: 2023-03-19 14:25+0000\n"
"Last-Translator: Harrissou Sant-anna, 2023\n"
"Language-Team: Estonian (https://app.transifex.com/qgis/teams/6144/et/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"Language: et\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:14
msgid "Loading Projects"
msgstr "Loading Projects"

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:16
msgid ""
"The code snippets on this page need the following imports if you're outside "
"the pyqgis console:"
msgstr ""
"The code snippets on this page need the following imports if you're outside "
"the pyqgis console:"

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:35
msgid ""
"Sometimes you need to load an existing project from a plugin or (more often)"
" when developing a standalone QGIS Python application (see: "
":ref:`pythonapplications`)."
msgstr ""
"Sometimes you need to load an existing project from a plugin or (more often)"
" when developing a standalone QGIS Python application (see: "
":ref:`pythonapplications`)."

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:42
msgid ""
"To load a project into the current QGIS application you need to create an "
"instance of the :class:`QgsProject <qgis.core.QgsProject>` class. This is a "
"singleton class, so you must use its :meth:`instance() "
"<qgis.core.QgsProject.instance>` method to do it. You can call its "
":meth:`read() <qgis.core.QgsProject.read>` method, passing the path of the "
"project to be loaded:"
msgstr ""
"To load a project into the current QGIS application you need to create an "
"instance of the :class:`QgsProject <qgis.core.QgsProject>` class. This is a "
"singleton class, so you must use its :meth:`instance() "
"<qgis.core.QgsProject.instance>` method to do it. You can call its "
":meth:`read() <qgis.core.QgsProject.read>` method, passing the path of the "
"project to be loaded:"

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:67
msgid ""
"If you need to make modifications to the project (for example to add or "
"remove some layers) and save your changes, call the :meth:`write() "
"<qgis.core.QgsProject.write>` method of your project instance. The "
":meth:`write() <qgis.core.QgsProject.write>` method also accepts an optional"
" path for saving the project to a new location:"
msgstr ""
"If you need to make modifications to the project (for example to add or "
"remove some layers) and save your changes, call the :meth:`write() "
"<qgis.core.QgsProject.write>` method of your project instance. The "
":meth:`write() <qgis.core.QgsProject.write>` method also accepts an optional"
" path for saving the project to a new location:"

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:79
msgid ""
"Both :meth:`read() <qgis.core.QgsProject.read>` and :meth:`write() "
"<qgis.core.QgsProject.write>` functions return a boolean value that you can "
"use to check if the operation was successful."
msgstr ""
"Both :meth:`read() <qgis.core.QgsProject.read>` and :meth:`write() "
"<qgis.core.QgsProject.write>` functions return a boolean value that you can "
"use to check if the operation was successful."

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:85
msgid ""
"If you are writing a QGIS standalone application, in order to synchronise "
"the loaded project with the canvas you need to instantiate a "
":class:`QgsLayerTreeMapCanvasBridge <qgis.gui.QgsLayerTreeMapCanvasBridge>` "
"as in the example below:"
msgstr ""
"If you are writing a QGIS standalone application, in order to synchronise "
"the loaded project with the canvas you need to instantiate a "
":class:`QgsLayerTreeMapCanvasBridge <qgis.gui.QgsLayerTreeMapCanvasBridge>` "
"as in the example below:"

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:97
msgid "Resolving bad paths"
msgstr "Resolving bad paths"

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:99
msgid ""
"It can happen that layers loaded in the project are moved to another "
"location. When the project is loaded again all the layer paths are broken. "
"The :class:`QgsPathResolver <qgis.core.QgsPathResolver>` class helps you "
"rewrite layers path within the project."
msgstr ""
"It can happen that layers loaded in the project are moved to another "
"location. When the project is loaded again all the layer paths are broken. "
"The :class:`QgsPathResolver <qgis.core.QgsPathResolver>` class helps you "
"rewrite layers path within the project."

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:104
msgid ""
"Its :meth:`setPathPreprocessor() "
"<qgis.core.QgsPathResolver.setPathPreprocessor>` method allows setting a "
"custom path pre-processor function to manipulate paths and data sources "
"prior to resolving them to file references or layer sources."
msgstr ""
"Its :meth:`setPathPreprocessor() "
"<qgis.core.QgsPathResolver.setPathPreprocessor>` method allows setting a "
"custom path pre-processor function to manipulate paths and data sources "
"prior to resolving them to file references or layer sources."

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:109
msgid ""
"The processor function must accept a single string argument (representing "
"the original file path or data source) and return a processed version of "
"this path. The path pre-processor function is called **before** any bad "
"layer handler. If multiple preprocessors are set, they will be called in "
"sequence based on the order in which they were originally set."
msgstr ""
"The processor function must accept a single string argument (representing "
"the original file path or data source) and return a processed version of "
"this path. The path pre-processor function is called **before** any bad "
"layer handler. If multiple preprocessors are set, they will be called in "
"sequence based on the order in which they were originally set."

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:115
msgid "Some use cases:"
msgstr "Some use cases:"

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:117
msgid "replace an outdated path:"
msgstr "replace an outdated path:"

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:126
msgid "replace a database host address with a new one:"
msgstr "replace a database host address with a new one:"

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:135
msgid "replace stored database credentials with new ones:"
msgstr "replace stored database credentials with new ones:"

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:146
msgid ""
"Likewise, a :meth:`setPathWriter() "
"<qgis.core.QgsPathResolver.setPathWriter>` method is available for a path "
"writer function."
msgstr ""
"Likewise, a :meth:`setPathWriter() "
"<qgis.core.QgsPathResolver.setPathWriter>` method is available for a path "
"writer function."

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:149
msgid "An example to replace the path with a variable:"
msgstr "An example to replace the path with a variable:"

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:158
msgid ""
"Both methods return an ``id`` that can be used to remove the pre-processor "
"or writer they added. See :meth:`removePathPreprocessor() "
"<qgis.core.QgsPathResolver.removePathPreprocessor>` and "
":meth:`removePathWriter() <qgis.core.QgsPathResolver.removePathWriter>`."
msgstr ""
"Both methods return an ``id`` that can be used to remove the pre-processor "
"or writer they added. See :meth:`removePathPreprocessor() "
"<qgis.core.QgsPathResolver.removePathPreprocessor>` and "
":meth:`removePathWriter() <qgis.core.QgsPathResolver.removePathWriter>`."
