# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002-now, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation 3.16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-20 10:25+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../docs/server_manual/containerized_deployment.rst:3
msgid "Containerized deployment"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:11
msgid ""
"There are many ways to use containerized application, from the most "
"simple (simple Docker images) to sophisticated (Kubernetes and so on)."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:14
msgid ""
"This kind of deployment needs the `docker application "
"<https://www.docker.com>`_ to be installed and running. Check this "
"`tutorial <https://www.docker.com/101-tutorial>`_."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:19
msgid ""
"Docker run pre packaged application (aka images) which can be retrieved "
"as sources (Dockerfile and resources) to build or already built from "
"registries (private or public)."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:23
msgid ""
"QGIS Debian-Ubuntu package downloads need a valid gpg authentication key."
" Please refer to the `installation pages "
"<https://www.qgis.org/fr/site/forusers/alldownloads.html#debian-ubuntu>`_"
" to update the following Dockerfile with the latest key fingerprint"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:30
msgid "Simple docker images"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:32
msgid ""
"As the docker image does not exist in a public registry. you will need to"
" build it. To do so create a directory :file:`qgis-server` and within its"
" directory:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:35
msgid "create a file :file:`Dockerfile` with this content:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:88
msgid "create a file :file:`cmd.sh` with this content:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:99
msgid "build the image with:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:107
msgid "First run"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:109
msgid ""
"To run the server you will need a QGIS project file. You can use one of "
"yours or pick `this sample <https://gitlab.com/Oslandia/qgis/docker-"
"qgis/-/blob/cc1798074d4a66a472721352f3984bb318777a5a/qgis-"
"exec/data/osm.qgs>`_."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:112
msgid ""
"To do so, create a directory :file:`data` within the directory :file"
":`qgis-server` and copy your file in it. To comply with the following "
"explanations, rename it to :file:`osm.qgs`."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:116
msgid "Now, you can run the server with:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:126
msgid "Options used:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:128
msgid "**-d**: run in the background"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:129
msgid "**--rm**: remove the container when it is stopped"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:130
msgid "**--name**: name of the container to be created"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:131
msgid "**--net**: (previously created) sub network"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:132
msgid "**--hostname**: container hostname, for later referencing"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:133
msgid "**-v**: local data directory to be mounted in the container"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:134
msgid "**-p**: host/container port mapping"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:135
msgid "**-e**: environment variable to be used in the container"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:138
msgid ""
"To check, type ``docker ps | grep qgis-server`` and you should see a line"
" with **qgis-server**::"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:146
msgid "Usable sample"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:148
msgid ""
"As the server is only accepting fastcgi connections, you need an HTTP "
"server that handles this protocol. To do so we have to create a simple "
"Nginx configuration file and start a Nginx image."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:153
msgid ""
"Create a file :file:`nginx.conf` in the current directory with this "
"content:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:174
msgid "And type this command:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:182
msgid ""
"To check capabilities availability, type in a browser "
"http://localhost:8080/qgis-"
"server/?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetCapabilities"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:186
#: ../../docs/server_manual/containerized_deployment.rst:282
#: ../../docs/server_manual/containerized_deployment.rst:505
msgid "Cleanup"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:188
msgid "To cleanup the running images, type:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:197
msgid "Docker stacks"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:199
msgid ""
"The previous method is scriptable, but not easily packageable nor "
"standardized or easily manageable."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:202
msgid ""
"To work with a docker image set you could use a docker stack managed by "
"an orchestrator. In a stack, the images are working in the same private "
"network, and you can start / stop the whole stack or deploy the stack to "
"other workers. There are many orchestrators, for example Swarm, "
"Kubernetes and Mesos."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:209
msgid ""
"In the following, we will present simple configurations for testing "
"purposes. They are not suitable for production."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:214
msgid "Swarm/docker-compose"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:216
msgid ""
"Docker now has its own orchestrator: Swarm (compatible with docker-"
"compose files). You have to `enable it <https://docs.docker.com/get-"
"started/orchestration/#enable-docker-swarm>`_ (the Mac version will also "
"work with Linux)."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:224
msgid "Stack description"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:226
msgid ""
"Now that you have Swarm working, create the service file (see `Deploy to "
"Swarm <https://docs.docker.com/get-started/swarm-deploy/>`_) :file:`qgis-"
"stack.yaml`:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:256
msgid "To deploy (or update) the stack, type:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:262
msgid ""
"Check the stack deployment status until you obtain **1/1** in the "
"**replicas** column:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:269
msgid "Something like:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:278
msgid ""
"To check WMS capabilities, type in a web browser http://localhost:8080"
"/qgis-server/?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetCapabilities"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:284
msgid "To cleanup, type:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:291
msgid "Kubernetes"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:294
msgid "Installation"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:296
msgid ""
"If you have a **Docker Desktop** installation, using Kubernetes (aka k8s)"
" is pretty straight forward: `enable k8s <https://docs.docker.com/get-"
"started/orchestration/#enable-kubernetes>`_."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:300
msgid ""
"If not, follow the `minikube tutorial "
"<https://kubernetes.io/docs/tutorials/hello-minikube/>`_ or `microk8s for"
" Ubuntu <https://ubuntu.com/tutorials/install-a-local-kubernetes-with-"
"microk8s>`_."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:305
msgid ""
"As Kubernetes installation can be really complex, we will only focus on "
"aspects used by this demo. For further / deeper information, check the "
"`official documentation <https://kubernetes.io/docs/home/>`_."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:311
msgid "microk8s"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:313
msgid ""
"microk8s needs extra steps: you have to enable the registry and tag the "
"qgis-server image in order to have Kubernetes to find the created images."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:317
msgid "First, enable the registry:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:323
msgid "Then, tag and push the image to your newly created registry:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:329
msgid ""
"Finally, add or complete the :file:`/etc/docker/daemon.json` to have your"
" registry **127.0.0.1:32000** listed in the **insecure-registries** "
"field:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:342
msgid "Creating manifests"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:344
msgid ""
"Kubernetes describes the objects to deploy in yaml manifests. There are "
"many different kinds, but we will only use deployments (handle pods, i.e."
" docker images) and services to expose the deployments to internal or "
"external purposes."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:350
msgid "Deployment manifests"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:352
msgid "Create a file :file:`deployments.yaml` with this content:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:424
msgid "Service manifests"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:426
msgid "Create a file :file:`services.yaml` with this content:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:458
msgid "Deploying manifests"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:460
msgid ""
"To deploy the images and services in Kubernetes, one can use the "
"dashboard (click on the **+** on the upper right) or the command line."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:464
msgid ""
"When using the command line with microk8s you will have to prefix each "
"command with `microk8s`."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:467
msgid "To deploy or update your manifests:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:473
msgid "To check what is currently deployed:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:479
msgid "You should obtain something like::"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:495
msgid "To read nginx/qgis logs, type:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:501
msgid ""
"To check WMS capabilities, type in a web browser http://localhost:30080"
"/qgis-server/?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetCapabilities"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:507
msgid "To clean up, type:"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:514
msgid "Cloud deployment"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:516
msgid ""
"Managing your own cluster of servers to handle the deployment of "
"containerized applications, is a complex job. You have to handle multiple"
" issues, such as hardware, bandwidth and security at different levels."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:521
msgid ""
"Cloud deployment solutions can be a good alternative when you do not want"
" to focus on infrastructure management."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:524
msgid ""
"A cloud deployment may use proprietary mechanisms, but they are also "
"compatible with the stages explained previously (:ref:`docker images "
"<simple-docker-images>` and :ref:`stack management <docker-stacks>`)."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:530
msgid "AWS usecase"
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:532
msgid ""
"With Amazon AWS, through `ECS (Elastic Container Service) "
"<https://console.aws.amazon.com/ecs/home>`_ functionalities, you can use "
"docker-compose or Kubernetes compatible wrappers to manage your stack. "
"You will have to create an `image registry "
"<https://console.aws.amazon.com/ecr/home>`_ for your custom images to be "
"accessible."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:540
msgid ""
"To use docker-compose alike functionalities, you need to install the "
"**ecs-cli** client and have `proper permissions / roles "
"<https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html>`_."
" Then, with the help of the `ecs-cli compose` commands (see the `ecs-cli "
"compose manual "
"<https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cmd-ecs-cli-"
"compose.html>`_ and `ecs-cli tutorial "
"<https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cli-"
"tutorial-fargate.html>`_), you can reuse the :ref:`stack description "
"<docker-compose-file>`."
msgstr ""

#: ../../docs/server_manual/containerized_deployment.rst:550
msgid ""
"To use Kubernetes, you can use the AWS web console or the command line "
"tool `eksctl <https://docs.aws.amazon.com/eks/latest/userguide/getting-"
"started.html>`_ and have the proper permissions / roles. Then with a well"
" configured kubectl environment, you can reuse the :ref:`Kubernetes "
"manifests <k8s-manifests>`."
msgstr ""

#~ msgid ""
#~ "If you have a **Docker Desktop** "
#~ "installation, using Kubernetes (aka k8s) "
#~ "is pretty straight forward: `enable k8s"
#~ " <https://docs.docker.com/get-started/orchestration"
#~ "/#enable-Kubernetes>`_."
#~ msgstr ""

#~ msgid ""
#~ "If not, follow the `minikube tutorial"
#~ " <https://Kubernetes.io/docs/tutorials/hello-minikube/>`_ "
#~ "or `microk8s for Ubuntu "
#~ "<https://ubuntu.com/tutorials/install-a-local-Kubernetes-"
#~ "with-microk8s>`_."
#~ msgstr ""

#~ msgid ""
#~ "As Kubernetes installation can be really"
#~ " complex, we will only focus on "
#~ "aspects used by this demo. For "
#~ "further / deeper information, check the"
#~ " `official documentation "
#~ "<https://Kubernetes.io/docs/home/>`_."
#~ msgstr ""

